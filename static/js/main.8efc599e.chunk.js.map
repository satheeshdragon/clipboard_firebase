{"version":3,"sources":["components/Message.js","components/MessageList.js","components/MessageBox.js","components/Header.js","App.js","registerServiceWorker.js","index.js"],"names":["Message","react_default","a","createElement","this","props","message","Component","MessageList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","messages","db","database","ref","on","snapshot","getData","val","values","messagesVal","_","keys","map","messageKey","cloned","clone","key","value","setState","messageNodes","className","components_Message","MessageBox","onChange","bind","assertThisInitialized","onKeyup","e","target","keyCode","trim","preventDefault","push","placeholder","cols","onKeyUp","Header","href","title","App","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","alert","remove","components_Header","components_MessageList","components_MessageBox","type","class","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8efc599e.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Message extends Component {\n\n  render(){\n    return (\n      <div>\n        {this.props.message}\n      </div>\n    )\n  }\n}\nexport default Message\n","import React, {Component} from 'react';\nimport Message from './Message';\nimport _ from 'lodash';\n\nclass MessageList extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      messages: []\n    };\n    let app = this.props.db.database().ref('messages');\n    app.on('value', snapshot => {\n      this.getData(snapshot.val());\n    });\n  }\n\n  getData(values){\n    let messagesVal = values;\n    let messages = _(messagesVal)\n                      .keys()\n                      .map(messageKey => {\n                          let cloned = _.clone(messagesVal[messageKey]);\n                          cloned.key = messageKey;\n                          return cloned;\n                      })\n                      .value();\n      this.setState({\n        messages: messages\n      });\n  }\n\n  render() {\n    let messageNodes = this.state.messages.map((message) => {\n      return (\n        <div className=\"card\">\n          <div className=\"card-content\">\n            <Message message = {message.message} />\n          </div>\n        </div>\n      )\n    });\n    return (\n      <div>\n        {messageNodes}\n      </div>\n    );\n  }\n}\n\nexport default MessageList\n","import React, {Component} from 'react';\nimport trim from 'trim';\n\nclass MessageBox extends Component {\n\n  constructor(props){\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onKeyup = this.onKeyup.bind(this);\n    this.state = {\n      message: ''\n    };\n  }\n  onChange(e){\n      this.setState({\n        message: e.target.value\n      });\n  }\n  onKeyup(e){\n    if(e.keyCode === 13 && trim(e.target.value) !== ''){\n      e.preventDefault();\n      let dbCon = this.props.db.database().ref('/messages');\n      dbCon.push({\n        message: trim(e.target.value)\n      });\n      this.setState({\n        message: ''\n      });\n    }\n  }\n  render() {\n    return (\n      <form>\n        <textarea\n            className=\"textarea\"\n            placeholder=\"Type a message\"\n            cols=\"100\"\n            onChange={this.onChange}\n            onKeyUp={this.onKeyup}\n            value={this.state.message}>\n          </textarea>\n      </form>\n    )\n  }\n}\n\nexport default MessageBox\n","import React, {Component} from 'react';\n\nclass Header extends Component {\n\n  render(){\n    return (\n      <nav className=\"navbar\">\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"https://github.com/satheeshdragon\">\n            {this.props.title}\n          </a>\n        </div>\n      </nav>\n    )\n  }\n}\nexport default Header\n","import React, { Component } from 'react';\nimport MessageList from './components/MessageList';\nimport MessageBox from './components/MessageBox';\nimport Header from './components/Header';\nimport firebase from 'firebase';\n\nclass App extends Component {\n\nconstructor(props){\n  super(props);\n  // this.onChange = this.onChange.bind(this);\n  var config = {\n    apiKey: \"AIzaSyDpNG2sDe3w-Lw39XGXNoNORW3v5kUbcTM\",\n    authDomain: \"reactsample-85097.firebaseapp.com\",\n    databaseURL: \"https://reactsample-85097.firebaseio.com\",\n    projectId: \"reactsample-85097\",\n    storageBucket: \"reactsample-85097.appspot.com\",\n    messagingSenderId: \"239796390852\",\n    appId: \"1:239796390852:web:017cc37910ca268b\"\n  };\n  firebase.initializeApp(config);\n}\n\nonClick(e){\n  alert('All Data Deleted');\n  firebase.database().ref('messages').remove()\n}\n\n  render() {\n    return (\n      <div className=\"container\">\n            <Header title=\"Satheesh Message Application\" />\n            <br/>\n            <div className=\"columns\">\n              <div className=\"column is-3\"></div>\n              <div className=\"column is-6\">\n                <MessageList db={firebase} />\n              </div>\n            </div>\n            <div className=\"columns\">\n            <div className=\"column is-3\"></div>\n            <div className=\"column is-6\">\n              <MessageBox db={firebase} />\n            </div>\n\n            <button type=\"button\" class=\"btn btn-default\" onClick={this.onClick}>Remove Data All</button>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}